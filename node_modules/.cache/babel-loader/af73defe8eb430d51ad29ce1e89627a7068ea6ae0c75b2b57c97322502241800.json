{"ast":null,"code":"var _jsxFileName = \"/Users/galgetz/HUJI/AI_Project/take-it-easy-game/src/App.js\",\n  _s = $RefreshSig$();\n// src/App.js\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport Board from './components/Board';\nimport TilePicker from './components/TilePicker';\nimport ScoreBoard from './components/ScoreBoard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 20px;\n  background-color: #f0f0f0;\n  min-height: 70vh;\n  justify-content: center; \n`;\n_c = AppContainer;\nconst GameTitle = styled.h1`\n  color: #333;\n  margin-bottom: 20px;\n`;\n_c2 = GameTitle;\nlet tiles = [];\nconst iValues = [1, 5, 9];\nconst jValues = [2, 6, 7];\nconst kValues = [3, 4, 8];\nfor (const i of iValues) {\n  for (const j of jValues) {\n    for (const k of kValues) {\n      tiles.push([i, j, k]);\n    }\n  }\n}\nfunction App() {\n  _s();\n  const [placedTiles, setPlacedTiles] = useState(Array.from({\n    length: 19\n  }));\n  const [restTiles, setRestTiles] = useState(tiles);\n  const [currentTile, setCurrentTile] = useState(() => {\n    const randomIndex = Math.floor(Math.random() * restTiles.length);\n    const tile = restTiles[randomIndex];\n    setRestTiles(restTiles.splice(randomIndex, 1));\n    return tile;\n  });\n  const pickRandomTile = tilesArr => {\n    const randomIndex = Math.floor(Math.random() * restTiles.length);\n    const tile = restTiles[randomIndex];\n    console.log(restTiles);\n    setRestTiles(restTiles.splice(randomIndex, 1));\n    return tile;\n  };\n  const choosePlace = index => {\n    const tilesArr = Array.from(placedTiles);\n    tilesArr[index] = currentTile;\n    setPlacedTiles(tilesArr);\n    setCurrentTile(pickRandomTile(tilesArr));\n  };\n  return /*#__PURE__*/_jsxDEV(AppContainer, {\n    children: [/*#__PURE__*/_jsxDEV(GameTitle, {\n      children: \"Take It Easy\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Board, {\n      onChoose: choosePlace,\n      currentTile: currentTile,\n      placedTiles: placedTiles\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TilePicker, {\n      currentTile: currentTile\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ScoreBoard, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"t3CfkBnInXELZl2l4Ykkjxaekp4=\");\n_c3 = App;\nexport default App;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"AppContainer\");\n$RefreshReg$(_c2, \"GameTitle\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"names":["React","useState","styled","Board","TilePicker","ScoreBoard","jsxDEV","_jsxDEV","AppContainer","div","_c","GameTitle","h1","_c2","tiles","iValues","jValues","kValues","i","j","k","push","App","_s","placedTiles","setPlacedTiles","Array","from","length","restTiles","setRestTiles","currentTile","setCurrentTile","randomIndex","Math","floor","random","tile","splice","pickRandomTile","tilesArr","console","log","choosePlace","index","children","fileName","_jsxFileName","lineNumber","columnNumber","onChoose","_c3","$RefreshReg$"],"sources":["/Users/galgetz/HUJI/AI_Project/take-it-easy-game/src/App.js"],"sourcesContent":["// src/App.js\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport Board from './components/Board';\nimport TilePicker from './components/TilePicker';\nimport ScoreBoard from './components/ScoreBoard';\n\nconst AppContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 20px;\n  background-color: #f0f0f0;\n  min-height: 70vh;\n  justify-content: center; \n`;\n\nconst GameTitle = styled.h1`\n  color: #333;\n  margin-bottom: 20px;\n`;\n\nlet tiles = [];\nconst iValues = [1, 5, 9];\nconst jValues = [2, 6, 7];\nconst kValues = [3, 4, 8];\n\nfor (const i of iValues) {\n  for (const j of jValues) {\n    for (const k of kValues) {\n      tiles.push([i, j, k]);\n    }\n  }\n}\n\nfunction App() {\n  const [placedTiles, setPlacedTiles] = useState(Array.from({ length: 19 }));\n  const [restTiles, setRestTiles] = useState(tiles)\n  const [currentTile, setCurrentTile] = useState(() => {\n    const randomIndex = Math.floor(Math.random() * restTiles.length);\n    const tile = restTiles[randomIndex];\n    setRestTiles(restTiles.splice(randomIndex, 1))\n    return tile;\n  });\n\n  const pickRandomTile = (tilesArr) => {\n    const randomIndex = Math.floor(Math.random() * restTiles.length);\n    const tile = restTiles[randomIndex];\n    console.log(restTiles);\n    setRestTiles(restTiles.splice(randomIndex, 1))\n    return tile;\n  };\n\n  const choosePlace = (index) => {\n    const tilesArr = Array.from(placedTiles);\n    tilesArr[index] = currentTile;\n    setPlacedTiles(tilesArr);\n    setCurrentTile(pickRandomTile(tilesArr));\n  }\n\n  return (\n    <AppContainer>\n      <GameTitle>Take It Easy</GameTitle>\n      <Board onChoose={choosePlace} currentTile={currentTile} placedTiles={placedTiles}/>\n      <TilePicker currentTile={currentTile}/>\n      <ScoreBoard />\n    </AppContainer>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}