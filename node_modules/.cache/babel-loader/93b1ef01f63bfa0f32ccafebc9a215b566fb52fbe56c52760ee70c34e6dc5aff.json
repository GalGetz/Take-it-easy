{"ast":null,"code":"var _jsxFileName = \"/Users/galgetz/HUJI/AI_Project/take-it-easy-game/src/App.js\",\n  _s = $RefreshSig$();\n// App.js\nimport React, { useState } from 'react';\nimport Board from './components/Board';\nimport TileDisplay from './components/TileDisplay';\nimport ScoreDisplay from './components/ScoreDisplay';\nimport { createTiles, drawTile, calculateScore } from './gameLogic';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [board, setBoard] = useState(Array(19).fill(null));\n  const [tiles, setTiles] = useState(createTiles());\n  const [currentTile, setCurrentTile] = useState(null);\n  const [score, setScore] = useState(0);\n  const [round, setRound] = useState(1);\n  const startNewRound = () => {\n    if (round <= 4) {\n      setCurrentTile(drawTile(tiles));\n      setTiles(prevTiles => prevTiles.slice(0, -1));\n    }\n  };\n  const placeTile = position => {\n    if (board[position] === null && currentTile) {\n      const newBoard = [...board];\n      newBoard[position] = currentTile;\n      setBoard(newBoard);\n      if (newBoard.every(cell => cell !== null)) {\n        // Board is full, end of round\n        setScore(prevScore => prevScore + calculateScore(newBoard));\n        setRound(prevRound => prevRound + 1);\n        setBoard(Array(19).fill(null));\n        setCurrentTile(null);\n      } else {\n        startNewRound();\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Take It Easy\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ScoreDisplay, {\n      score: score,\n      round: round\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Board, {\n      board: board,\n      placeTile: placeTile\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TileDisplay, {\n      tile: currentTile\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), !currentTile && round <= 4 && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startNewRound,\n      children: [\"Start Round \", round]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this), round > 4 && /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Game Over! Final Score: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"t+mE1tZJ9Q9u1lOed9bKYjiUPXY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Board","TileDisplay","ScoreDisplay","createTiles","drawTile","calculateScore","jsxDEV","_jsxDEV","App","_s","board","setBoard","Array","fill","tiles","setTiles","currentTile","setCurrentTile","score","setScore","round","setRound","startNewRound","prevTiles","slice","placeTile","position","newBoard","every","cell","prevScore","prevRound","className","children","fileName","_jsxFileName","lineNumber","columnNumber","tile","onClick","_c","$RefreshReg$"],"sources":["/Users/galgetz/HUJI/AI_Project/take-it-easy-game/src/App.js"],"sourcesContent":["// App.js\nimport React, { useState } from 'react';\nimport Board from './components/Board';\nimport TileDisplay from './components/TileDisplay';\nimport ScoreDisplay from './components/ScoreDisplay';\nimport { createTiles, drawTile, calculateScore } from './gameLogic';\n\nfunction App() {\n  const [board, setBoard] = useState(Array(19).fill(null));\n  const [tiles, setTiles] = useState(createTiles());\n  const [currentTile, setCurrentTile] = useState(null);\n  const [score, setScore] = useState(0);\n  const [round, setRound] = useState(1);\n\n  const startNewRound = () => {\n    if (round <= 4) {\n      setCurrentTile(drawTile(tiles));\n      setTiles(prevTiles => prevTiles.slice(0, -1));\n    }\n  };\n\n  const placeTile = (position) => {\n    if (board[position] === null && currentTile) {\n      const newBoard = [...board];\n      newBoard[position] = currentTile;\n      setBoard(newBoard);\n      \n      if (newBoard.every(cell => cell !== null)) {\n        // Board is full, end of round\n        setScore(prevScore => prevScore + calculateScore(newBoard));\n        setRound(prevRound => prevRound + 1);\n        setBoard(Array(19).fill(null));\n        setCurrentTile(null);\n      } else {\n        startNewRound();\n      }\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Take It Easy</h1>\n      <ScoreDisplay score={score} round={round} />\n      <Board board={board} placeTile={placeTile} />\n      <TileDisplay tile={currentTile} />\n      {!currentTile && round <= 4 && (\n        <button onClick={startNewRound}>Start Round {round}</button>\n      )}\n      {round > 4 && <h2>Game Over! Final Score: {score}</h2>}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}