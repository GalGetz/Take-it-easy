{"ast":null,"code":"var _jsxFileName = \"/Users/galgetz/HUJI/AI_Project/take-it-easy-game/src/App.js\",\n  _s = $RefreshSig$();\n// src/App.js\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport Board from './components/Board';\nimport TilePicker from './components/TilePicker';\nimport ScoreBoard from './components/ScoreBoard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 20px;\n  background-color: #f0f0f0;\n  min-height: 70vh;\n  justify-content: center; \n`;\n_c = AppContainer;\nconst GameTitle = styled.h1`\n  color: #333;\n  margin-bottom: 20px;\n`;\n_c2 = GameTitle;\nconst tiles = [];\nconst iValues = [1, 5, 9];\nconst jValues = [2, 6, 7];\nconst kValues = [3, 4, 8];\nfor (const i of iValues) {\n  for (const j of jValues) {\n    for (const k of kValues) {\n      tiles.push([i, j, k]);\n    }\n  }\n}\nfunction App() {\n  _s();\n  const [placedTiles, setPlacedTiles] = useState([]);\n  const [currentTile, setCurrentTile] = useState(possibleTiles[Math.floor(Math.random() * possibleTiles.length)]);\n  const pickRandomTile = () => {\n    const randomIndex = Math.floor(Math.random() * possibleTiles.length);\n    setCurrentTile(possibleTiles[randomIndex]);\n  };\n  return /*#__PURE__*/_jsxDEV(AppContainer, {\n    children: [/*#__PURE__*/_jsxDEV(GameTitle, {\n      children: \"Take It Easy\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Board, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TilePicker, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ScoreBoard, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"RlG6kfoOkPF8YQ211Vxux4aw8EI=\");\n_c3 = App;\nexport default App;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"AppContainer\");\n$RefreshReg$(_c2, \"GameTitle\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"names":["React","useState","styled","Board","TilePicker","ScoreBoard","jsxDEV","_jsxDEV","AppContainer","div","_c","GameTitle","h1","_c2","tiles","iValues","jValues","kValues","i","j","k","push","App","_s","placedTiles","setPlacedTiles","currentTile","setCurrentTile","possibleTiles","Math","floor","random","length","pickRandomTile","randomIndex","children","fileName","_jsxFileName","lineNumber","columnNumber","_c3","$RefreshReg$"],"sources":["/Users/galgetz/HUJI/AI_Project/take-it-easy-game/src/App.js"],"sourcesContent":["// src/App.js\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport Board from './components/Board';\nimport TilePicker from './components/TilePicker';\nimport ScoreBoard from './components/ScoreBoard';\n\nconst AppContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 20px;\n  background-color: #f0f0f0;\n  min-height: 70vh;\n  justify-content: center; \n`;\n\nconst GameTitle = styled.h1`\n  color: #333;\n  margin-bottom: 20px;\n`;\n\nconst tiles = [];\nconst iValues = [1, 5, 9];\nconst jValues = [2, 6, 7];\nconst kValues = [3, 4, 8];\n\nfor (const i of iValues) {\n  for (const j of jValues) {\n    for (const k of kValues) {\n      tiles.push([i, j, k]);\n    }\n  }\n}\n\nfunction App() {\n  const [placedTiles, setPlacedTiles] = useState([]);\n  const [currentTile, setCurrentTile] = useState(possibleTiles[Math.floor(Math.random() * possibleTiles.length)]);\n\n  const pickRandomTile = () => {\n    const randomIndex = Math.floor(Math.random() * possibleTiles.length);\n    setCurrentTile(possibleTiles[randomIndex]);\n  };\n\n  return (\n    <AppContainer>\n      <GameTitle>Take It Easy</GameTitle>\n      <Board />\n      <TilePicker />\n      <ScoreBoard />\n    </AppContainer>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,MAAM,MAAM,mBAAmB;AACtC,OAAOC,KAAK,MAAM,oBAAoB;AACtC,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,UAAU,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,YAAY,GAAGN,MAAM,CAACO,GAAG;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,EAAA,GARIF,YAAY;AAUlB,MAAMG,SAAS,GAAGT,MAAM,CAACU,EAAE;AAC3B;AACA;AACA,CAAC;AAACC,GAAA,GAHIF,SAAS;AAKf,MAAMG,KAAK,GAAG,EAAE;AAChB,MAAMC,OAAO,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AACzB,MAAMC,OAAO,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AACzB,MAAMC,OAAO,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AAEzB,KAAK,MAAMC,CAAC,IAAIH,OAAO,EAAE;EACvB,KAAK,MAAMI,CAAC,IAAIH,OAAO,EAAE;IACvB,KAAK,MAAMI,CAAC,IAAIH,OAAO,EAAE;MACvBH,KAAK,CAACO,IAAI,CAAC,CAACH,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,CAAC;IACvB;EACF;AACF;AAEA,SAASE,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACyB,WAAW,EAAEC,cAAc,CAAC,GAAG1B,QAAQ,CAAC2B,aAAa,CAACC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGH,aAAa,CAACI,MAAM,CAAC,CAAC,CAAC;EAE/G,MAAMC,cAAc,GAAGA,CAAA,KAAM;IAC3B,MAAMC,WAAW,GAAGL,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGH,aAAa,CAACI,MAAM,CAAC;IACpEL,cAAc,CAACC,aAAa,CAACM,WAAW,CAAC,CAAC;EAC5C,CAAC;EAED,oBACE3B,OAAA,CAACC,YAAY;IAAA2B,QAAA,gBACX5B,OAAA,CAACI,SAAS;MAAAwB,QAAA,EAAC;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAW,CAAC,eACnChC,OAAA,CAACJ,KAAK;MAAAiC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACThC,OAAA,CAACH,UAAU;MAAAgC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACdhC,OAAA,CAACF,UAAU;MAAA+B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEnB;AAAChB,EAAA,CAjBQD,GAAG;AAAAkB,GAAA,GAAHlB,GAAG;AAmBZ,eAAeA,GAAG;AAAC,IAAAZ,EAAA,EAAAG,GAAA,EAAA2B,GAAA;AAAAC,YAAA,CAAA/B,EAAA;AAAA+B,YAAA,CAAA5B,GAAA;AAAA4B,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}